#version 410 core

layout(triangles, invocations = 1) in;
layout(triangle_strip, max_vertices = 18) out;

#define SWZ(SIGNX, X, SIGNY, Y, SIGNZ, Z, SIGNW, W)\
   newpos0.x = SIGNX pos0.X; newpos1.x = SIGNX pos1.X; newpos2.x = SIGNX pos2.X;\
   newpos0.y = SIGNY pos0.Y; newpos1.y = SIGNY pos1.Y; newpos2.y = SIGNY pos2.Y;\
   newpos0.z = SIGNZ pos0.Z; newpos1.z = SIGNZ pos1.Z; newpos2.z = SIGNZ pos2.Z;\
   newpos0.w = SIGNW pos0.W; newpos1.w = SIGNW pos1.W; newpos2.w = SIGNW pos2.W;
   

#define TSWZ(T, S, F) \
   T = ((control & (2 << F)) != 0) ? S.y : S.x; \
   T = ((control & (4 << F)) != 0) ? S.z : T; \
   if((control & (1 << F)) != 0) T = -T;

// Swizzle table: 0xWYX;
   // 0 => +X, 1 => -X
   // 2 => +Y, 3 => -Y
   // 4 => +Z, 5 => -Z
uniform uint table[] = {
	0x035, // out.W = in.X; out.Y = -in.Y; out.X = -in.Z.
	0x134, // so on following the same pattern and the key above
	0x240,
	0x350,
	0x430,
	0x531
};
uniform mat4 u_cameraMatrices[6];

in VertexData {
	vec3 normal;
	vec3 normalEye;
	vec3 pos;
	vec3 posEye;
	vec2 texCoord;
} inData[];

in float planeMask[];

out VertexData {
	vec3 normal;
	vec3 normalEye;
	vec3 pos;
	vec3 posEye;
	vec2 texCoord;
} outData;

void main() {

	int pm0 = int(planeMask[0]);
	int pm1 = int(planeMask[1]);
	int pm2 = int(planeMask[2]);
	int prim_plane_mask_0 = pm0 & pm1 & pm2;
	int prim_plane_mask_1 = ~pm0 & ~pm1 & ~pm2;
	int combined_mask = prim_plane_mask_0 | (prim_plane_mask_1 << 16);

	int face_mask = 0;
	if((combined_mask & 0x00010f) == 0) face_mask |= 0x01;
	if((combined_mask & 0x0f0200) == 0) face_mask |= 0x02;
	if((combined_mask & 0x110422) == 0) face_mask |= 0x04;
	if((combined_mask & 0x220811) == 0) face_mask |= 0x08;
	if((combined_mask & 0x041038) == 0) face_mask |= 0x10;
	if((combined_mask & 0x382004) == 0) face_mask |= 0x20;

	vec4 pos0 = gl_in[0].gl_Position.xyzw;
	vec4 pos1 = gl_in[1].gl_Position.xyzw;
	vec4 pos2 = gl_in[2].gl_Position.xyzw;

	for(int face = 0; face < 6; face++) {
		vec4 newpos0, newpos1, newpos2;
		gl_Layer = face;

		switch(face){
			case 0:  SWZ(-,z,-,y, ,w, ,x); break;
			case 1:  SWZ( ,z,-,y, ,w,-,x); break;
			case 2:  SWZ( ,x, ,z, ,w, ,y); break;
			case 3:  SWZ( ,x,-,z, ,w,-,y); break;
			case 4:  SWZ( ,x,-,y, ,w, ,z); break;
			default: SWZ(-,x,-,y, ,w,-,z); break;
		}

		if(((face_mask >> face) & 1) != 0) {
			gl_Position = newpos0; 
			outData.pos = inData[0].pos;
			outData.posEye = inData[0].posEye;
			outData.texCoord = inData[0].texCoord;
			outData.normal = inData[0].normal;
			outData.normalEye = normalize(mat3(u_cameraMatrices[face]) * inData[0].normalEye);
			EmitVertex();

			gl_Position = newpos1; 
			outData.pos = inData[1].pos;
			outData.posEye = inData[1].posEye;
			outData.texCoord = inData[1].texCoord;
			outData.normal = inData[1].normal;
			outData.normalEye = normalize(mat3(u_cameraMatrices[face]) * inData[1].normalEye);
			EmitVertex();

			gl_Position = newpos2; 
			outData.pos = inData[2].pos;
			outData.posEye = inData[2].posEye;
			outData.texCoord = inData[2].texCoord;
			outData.normal = inData[2].normal;
			outData.normalEye = normalize(mat3(u_cameraMatrices[face]) * inData[2].normalEye);
			EmitVertex();

			EndPrimitive();
		}
	}
}
