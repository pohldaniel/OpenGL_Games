#version 410 core
#extension GL_ARB_gpu_shader5 : enable

layout(triangles, invocations = 28) in;
layout(triangle_strip, max_vertices = 6) out;

uniform mat4 u_projection, u_view;
mat4 Matrix = u_projection * u_view;
uniform vec3 u_campos;

const float WindingDirection = -1;
const float ShellHeight = 0.1;

in vec3 vertNormal[3];
in vec3 vertTangent[3];
in vec2 vertTexCoord[3];

out gl_PerVertex {
	vec4 gl_Position;
	float gl_ClipDistance[3];
};

flat out mat3 geomPositionFront;
flat out mat3 geomNormalFront;
flat out mat3 geomTangentFront;
flat out mat3 geomTexCoordFront;
flat out vec3 geomWFront;

noperspective out vec3 geomBarycentric;

out vec3 geomPosition;
out vec3 geomNormal;
out vec3 geomTangent;
out vec3 geomTexCoord;

mat3x4 get_world_pos(int id){
	mat3x4 result;
	id -= 2;
	if(id == -2){
		for(int v=0; v!=3; ++v){
			result[v] = gl_in[2-v].gl_Position;
		}
	}else if(id == -1){
		for(int v=0; v!=3; ++v){
			result[v] = gl_in[v].gl_Position + vec4(ShellHeight*vertNormal[v], 0.0);
		}
	}else{
		int v = id/2;
		int w = (v+1)%3;
        if(id % 2 == 0){
			result[0] = gl_in[v].gl_Position;
			result[1] = gl_in[w].gl_Position;
			result[2] = gl_in[v].gl_Position+ vec4(ShellHeight*vertNormal[v], 0.0);
		}else{
			result[0] = gl_in[w].gl_Position;
			result[1] = gl_in[w].gl_Position + vec4(ShellHeight*vertNormal[w], 0.0);
			result[2] = gl_in[v].gl_Position + vec4(ShellHeight*vertNormal[v], 0.0);
		}
    }
    return result;
}

mat3x4 get_view_pos(mat3x4 pos){
    for(int v=0; v!=3; ++v)
        pos[v] = Matrix * pos[v];
    return pos;
}

mat3 get_screen_pos(mat3x4 pos){
    mat3 res;
    for(int v=0; v!=3; ++v)
        res[v] = pos[v].xyz/pos[v].w;
    return res;
}

bool is_front_facing(mat3x4 view_pos){
    mat3 screen_pos = get_screen_pos(view_pos);
    return WindingDirection * cross(screen_pos[1]-screen_pos[0],screen_pos[2]-screen_pos[0]).z < 0.0;
}

mat3 get_tex_coords(int id){
    mat3 result;
    id -= 2;
    if(id == -2){
        for(int v=0; v!=3; ++v){
			result[v] = vec3(vertTexCoord[2-v], 0.0);
        }
    }else if(id == -1){
        for(int v=0; v!=3; ++v){
			result[v] = vec3(vertTexCoord[v], 1.0);
        }
    }else{
        int v = id/2;
        int w = (v+1)%3;
        if(id % 2 == 0){
			result[0] = vec3(vertTexCoord[v], 0.0);
			result[1] = vec3(vertTexCoord[w], 0.0);
			result[2] = vec3(vertTexCoord[v], 1.0);
        }else{
			result[0] = vec3(vertTexCoord[w], 0.0);
			result[1] = vec3(vertTexCoord[w], 1.0);
			result[2] = vec3(vertTexCoord[v], 1.0);
        }
    }
    return result;
}

mat3 get_vectors(int id, vec3 attrib[3]){
    mat3 result;
    id -= 2;
    if(id == -2){
        for(int v=0; v!=3; ++v){
			result[v] = attrib[2-v];
        }
    }else if(id == -1){
        for(int v=0; v!=3; ++v){
			result[v] = attrib[v];
        }
    }else{
        int v = id/2;
        int w = (v+1)%3;
        if(id % 2 == 0){
			result[0] = attrib[v];
			result[1] = attrib[w];
			result[2] = attrib[v];
		}else{
			result[0] = attrib[w];
			result[1] = attrib[w];
			result[2] = attrib[v];
        }
    }
    return result;
}

void main(){
	int ft = gl_InvocationID/4+1;

	mat3x4 world_pos_f = get_world_pos(ft);

	mat3x4 view_pos_f = get_view_pos(world_pos_f);

	if(!is_front_facing(view_pos_f)) return;

	int bt[2];
	bt[0] = (gl_InvocationID%4)*2;
	bt[1] = bt[0]+1;

    mat3x4 world_pos[2];
    mat3x4 view_pos[2];
    bool front_facing[2];

	for(int b=0; b!=2; ++b){
		if(ft == bt[b]){
			front_facing[b] = true;
		}else{
			world_pos[b] = get_world_pos(bt[b]);
			view_pos[b] = get_view_pos(world_pos[b]);
			front_facing[b] = is_front_facing(view_pos[b]);
         }
    }

    if(front_facing[0] && front_facing[1]) return;

    vec4 clip_plane[3];
    for(int v=0; v!=3; ++v){
		int w = (v+1)%3;
		vec3 p0 = world_pos_f[v].xyz;
		vec3 p1 = world_pos_f[w].xyz;
		vec3 p2 = u_campos;
		vec3 pv = WindingDirection*normalize(cross(p1-p0, p2-p0));
		clip_plane[v] = vec4(pv, -dot(pv, p0));
    }

    vec3 lo = u_campos;
    vec3 p0 = world_pos_f[0].xyz;
    vec3 pu = world_pos_f[1].xyz-p0;
    vec3 pv = world_pos_f[2].xyz-p0;
    vec3 lp = lo-p0;

    float w0 = view_pos_f[0].w;
    float wu = view_pos_f[1].w-w0;
    float wv = view_pos_f[2].w-w0;

    mat3 normal_f = get_vectors(ft, vertNormal);
    vec3 n0 = normal_f[0];
    vec3 nu = normal_f[1]-n0;
    vec3 nv = normal_f[2]-n0;

    mat3 tangent_f = get_vectors(ft, vertTangent);
    vec3 t0 = tangent_f[0];
    vec3 tu = tangent_f[1]-t0;
    vec3 tv = tangent_f[2]-t0;

    mat3 tex_coord_f = get_tex_coords(ft);
    vec3 tc0 = tex_coord_f[0];
    vec3 tcu = tex_coord_f[1]-tc0;
    vec3 tcv = tex_coord_f[2]-tc0;

    for(int b=0; b!=2; ++b){
		if(front_facing[b]) continue;
		for(int v=0; v!=3; ++v){
			vec3 lt = world_pos[b][v].xyz;
			mat3 im = mat3(lo-lt, pu, pv);
			vec3 ic = inverse(im)*lp;
			float s = ic.y;
			float t = ic.z;

			geomPositionFront[v] = p0+pu*s+pv*t;
			geomNormalFront[v] = n0+nu*s+nv*t;
			geomTangentFront[v] = t0+tu*s+tv*t;
			geomTexCoordFront[v] = tc0+tcu*s+tcv*t;
			geomWFront[v] = w0+wu*s+wv*t;
        }
		
        mat3 normal = get_vectors(bt[b], vertNormal);
        mat3 tangent = get_vectors(bt[b], vertTangent);
        mat3 tex_coord = get_tex_coords(bt[b]);
        for(int v=0; v!=3; ++v){
			gl_Position = view_pos[b][v];
			for(int c=0; c!=3; ++c){
				gl_ClipDistance[c] = dot(clip_plane[c], world_pos[b][v]);
			}
			geomPosition = world_pos[b][v].xyz;
			geomNormal = normal[v];
			geomTangent = tangent[v];
			geomTexCoord = tex_coord[v];
			geomBarycentric = vec3(0.0);
			geomBarycentric[v] = 1.0;

			EmitVertex();
        }
		EndPrimitive();
    }
}