#version 410 core

layout (lines_adjacency) in;
layout (triangle_strip, max_vertices = 4) out;

in vec2 Field[];
in vec4 Color[];

uniform float IsoValue = 0.5;
uniform sampler2DRect edgeTex;

out	vec4 v_color;
out	vec3 v_normal;

vec4 CalcIntersection2(vec4 Pos0, vec2 Field0, vec4 Pos1, vec2 Field1) {
	float t = (IsoValue - Field0.x) / (Field1.x - Field0.x);
	return mix(Pos0, Pos1, t);
}

// calculate triangle normal
vec3 calcNormal(vec3 v0, vec3 v1, vec3 v2) {
    vec3 edge0 = v1 - v0;
    vec3 edge1 = v2 - v0;
    return normalize(cross(edge0, edge1));
}

void main(){

	// construct index for this tetrahedron
	int index = (int(Field[0].y) << 3) | (int(Field[1].y) << 2) | (int(Field[2].y) << 1) | int(Field[3].y);
	
	// don't bother if all vertices out or all vertices in
	if (index > 0 && index < 15) {
		ivec4 e0 = ivec4(texture2DRect(edgeTex, vec2(index, 0)) * 255);
		ivec4 e1 = ivec4(texture2DRect(edgeTex, vec2(index, 1)) * 255);
		

		// Emit a triangle
		vec4 p0 = CalcIntersection2(gl_in[e0.x].gl_Position, Field[e0.x], gl_in[e0.y].gl_Position, Field[e0.y]);
		vec4 p1 = CalcIntersection2(gl_in[e0.z].gl_Position, Field[e0.z], gl_in[e0.w].gl_Position, Field[e0.w]);
		vec4 p2 = CalcIntersection2(gl_in[e1.x].gl_Position, Field[e1.x], gl_in[e1.y].gl_Position, Field[e1.y]);
		vec3 n = calcNormal(p2.xyz, p1.xyz, p0.xyz);
		
		gl_Position = p0;
		v_normal = n;
		v_color = Color[0];
		EmitVertex();
		
		gl_Position = p1;
		v_normal = n;
		v_color = Color[0];
		EmitVertex();
		
		gl_Position = p2;
		v_normal = n;
		v_color = Color[0];
		EmitVertex();
		
		// Emit additional triangle, if necessary
		if (e1.z != 0) {
			vec4 p3 = CalcIntersection2(gl_in[e1.z].gl_Position, Field[e1.z], gl_in[e1.w].gl_Position, Field[e1.w]);
			vec3 n = calcNormal(p1.xyz, p2.xyz, p3.xyz);
			gl_Position = p3;
			v_normal = n;
			v_color = Color[0];
			EmitVertex();
		}
		
		EndPrimitive();
		
	}

}