#version 410 core

layout (lines_adjacency) in;
layout (triangle_strip, max_vertices = 4) out;

in vec2 Field[];
in vec3 Normal[];
in vec4 Color[];

uniform float IsoValue = 1.0;
uniform sampler2DRect edgeTex;

out	vec3 v_normal;
out	vec4 v_color;

// Estimate where isosurface intersects grid edge with endpoints v0, v1
void CalcIntersection(vec4 Pos0, vec3 N0, vec2 Field0, vec4 Pos1, vec3 N1, vec2 Field1) {
	float t = (IsoValue - Field0.x) / (Field1.x - Field0.x);
	vec4 Pos = mix(Pos0, Pos1, t);
	vec3 N = mix(N0, N1, t);
	
	gl_Position = Pos;
	v_normal = N;
	v_color = Color[0];
	EmitVertex();
}

void main(){

	// construct index for this tetrahedron
	int index = (int(Field[0].y) << 3) | (int(Field[1].y) << 2) | (int(Field[2].y) << 1) | int(Field[3].y);
	
	// don't bother if all vertices out or all vertices in
	if (index > 0 && index < 15) {
		ivec4 e0 = ivec4(texelFetch(edgeTex, ivec2(index, 0)) * 255);
		ivec4 e1 = ivec4(texelFetch(edgeTex, ivec2(index, 1)) * 255);
		//ivec4 e0 = ivec4(texture2DRect(edgeTex, vec2(index, 0)) * 255);
		//ivec4 e1 = ivec4(texture2DRect(edgeTex, vec2(index, 1)) * 255);

		// Emit a triangle
		CalcIntersection(gl_in[e0.x].gl_Position, Normal[e0.x], Field[e0.x], gl_in[e0.y].gl_Position, Normal[e0.y], Field[e0.y]);
		CalcIntersection(gl_in[e0.z].gl_Position, Normal[e0.z], Field[e0.z], gl_in[e0.w].gl_Position, Normal[e0.w], Field[e0.w]);
		CalcIntersection(gl_in[e1.x].gl_Position, Normal[e1.x], Field[e1.x], gl_in[e1.y].gl_Position, Normal[e1.y], Field[e1.y]);
		
		
		if (e1.z != 0) {
			CalcIntersection(gl_in[e1.z].gl_Position, Normal[e1.z], Field[e1.z], gl_in[e1.w].gl_Position, Normal[e1.w], Field[e1.w]);
		}
		EndPrimitive();
	}
}