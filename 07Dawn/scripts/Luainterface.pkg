$#include "TilesetManager.h"
$#include "Zone.h"
$#include "Character.h"
$#include "TextureManager.h"
$#include "Npc.h"
$#include "Player.h"
$#include "InteractionRegion.h"
$#include "InteractionPoint.h"
$#include "TextWindow.h"
$#include "Enums.h"
$#include "Actions.h"
$#include "Spells.h"
$#include "Item.h"
$#include "Shop.h"
$#include "Quest.h"
$#include "CallIndirection.h"
$#include "Shop.h"

namespace Enums {
	enum TileClassificationType{
		FLOOR,
		ENVIRONMENT,
		SHADOW,
		COLLISION,
		NPC,
		COUNT
	};

	enum AdjacencyType {
		RIGHT,
		LEFT,
		TOP,
		BOTTOM
	};
	
	enum Attitude
	{
		FRIENDLY,
		NEUTRAL,
		HOSTILE
	};
	
	enum CharacterClass
	{
		NOCLASS,
		ANYCLASS,
		Liche,
		Ranger,
		Warrior
	};
	
	enum ActivityType
	{
		Walking,
		Casting,
		Attacking,
		Shooting,
		Dying,
		Count
	};
	
	enum Direction
	{
		STOP = 0,
		N    = 1,
		NE   = 2,
		E    = 3,
		SE   = 4,
		S    = 5,
		SW   = 6,
		W    = 7,
		NW   = 8
	};
	
	enum InteractionType {
		Quest,
		Shop,
		Zone
	};
	
	enum EffectType {
		SingleTargetSpell,
		SelfAffectingSpell,
		AreaTargetSpell
	};

	enum ElementType{
		Fire,
		Water,
		Air,
		Earth,
		Light,
		Dark,
		CountET
	};

	enum StatsType {
		Dexterity,
		Intellect,
		Strength,
		Vitality,
		Wisdom,
		Health,
		Mana,
		Fatigue,
		Armor,
		DamageModifier,
		HitModifier,
		EvadeModifier,
		ParryModifier,
		BlockModifier,
		MeleeCritical,
		SpellCritical,
		ResistAll,
		SpellEffectAll,
		HealthRegen,
		ManaRegen,
		FatigueRegen,
		CountST
	};
	
	enum CharacterStates {
		Channeling,
		Charmed,
		Confused,
		Feared,
		Invisible,
		Mesmerized,
		Movementspeed,
		SeeInvisible,
		SeeSneaking,
		Sneaking,
		Stunned,
		NOEFFECT
	};
	
	enum WeaponType {
		NO_WEAPON = 0x01,
		ONEHAND_SWORD = 0x02,
		TWOHAND_SWORD = 0x04,
		DAGGER = 0x08,
		STAFF = 0x10,
		ONEHAND_CLUB = 0x20,
		TWOHAND_CLUB = 0x40,
		WAND = 0x80,
		SPELLBOOK = 0x100, // offhand spellbooks for caster classes.
		ONEHAND_MACE = 0x200,
		TWOHAND_MACE = 0x400,
		ONEHAND_AXE = 0x800,
		TWOHAND_AXE = 0x1000,
		BOW = 0x2000,
		SLINGSHOT = 0x4000,
		CROSSBOW = 0x8000,
		SHIELD = 0x10000,
		COUNTWT = 0x20000
	};
	
	enum ItemType {
		QUESTITEM,
		MISCELLANEOUS,
		ARMOR,
		WEAPON,
		JEWELRY,
		SCROLL,
		POTION,
		FOOD,
		DRINK,
		NEWSPELL,
		COUNT
	};

	enum ArmorType {
		NO_ARMOR,
		CLOTH,
		LEATHER,
		MAIL,
		PLATE
	};
	
	enum ItemQuality {
		POOR,
		NORMAL,
		ENHANCED,
		RARE,
		LORE
	};
	
	enum TriggerType {
		TAKING_DAMAGE,
		EXECUTING_ACTION
	};
	
	enum PositionType {
		BOTTOMLEFT,
		BOTTOMCENTER,
		LEFTCENTER,
		CENTER
	};
}

namespace EquipPosition {
	
	enum EquipPosition {
		MAIN_HAND,
		OFF_HAND,
		CHEST,
		LEGS,
		BELT,
		BOOTS,
		RING,
		GLOVES,
		HEAD,
		CLOAK,
		AMULET,
		SHOULDER,
		NONE
	};
}

namespace DawnInterface{
	TextureRect& loadimage(std::string file);

	void enterZone(std::string zoneName, int enterX, int enterY );
	void setCurrentZone(std::string zoneName );
	CharacterType& createNewMobType(std::string typeID);
	Npc* addMobSpawnPoint(std::string mobID, std::string name, int x_pos, int y_pos, int respawn_rate, int do_respawn, Enums::Attitude attitude);
	InteractionRegion& addInteractionRegion();
	void removeInteractionRegion(InteractionRegion *regionToRemove);
	InteractionPoint& addInteractionPoint();
	InteractionPoint& addCharacterInteractionPoint(Character *character);
	std::string getAllZonesSaveText();
	void removeInteractionPoint(InteractionPoint *pointToRemove);
	
	std::string getItemReferenceRestore(std::string varName, void *ignore);
	std::string getItemReferenceRestore(std::string varName, Quest* quest);
	std::string getItemReferenceRestore(std::string varName, Shop *shop);

	std::string getReinitialisationString(std::string fullVarName, Quest* quest);
	std::string getReinitialisationString( std::string fullVarName, void *ignore );
	std::string getSpellbookSaveText();
	std::string getActionbarSaveText();
	std::string getReenterCurrentZoneText();
	void restoreActionBar(int buttonNr, SpellActionBase *action);
	void restoreGroundLootItem(Item *item, int xPos, int yPos);
	TextWindow* createTextWindow();
	
	GeneralRayDamageSpell* createGeneralRayDamageSpell();
	GeneralAreaDamageSpell* createGeneralAreaDamageSpell();
	GeneralBoltDamageSpell* createGeneralBoltDamageSpell();
	GeneralHealingSpell* createGeneralHealingSpell();
	GeneralBuffSpell* createGeneralBuffSpell();
	MeleeDamageAction* createMeleeDamageAction();
	RangedDamageAction* createRangedDamageAction();
	GeneralRayDamageSpell* copySpell( GeneralRayDamageSpell *other );
	GeneralAreaDamageSpell* copySpell( GeneralAreaDamageSpell *other );
	GeneralBoltDamageSpell* copySpell( GeneralBoltDamageSpell *other );
	GeneralHealingSpell* copySpell( GeneralHealingSpell *other );
	GeneralBuffSpell* copySpell( GeneralBuffSpell *other );
	MeleeDamageAction* copySpell( MeleeDamageAction *other );
	RangedDamageAction* copySpell( RangedDamageAction *other );
	void inscribeSpellInPlayerSpellbook( SpellActionBase *inscribedSpell );
	void reloadSpellsFromPlayer();
	
	std::string getInventorySaveText();
	void restoreItemInBackpack( Item *item, int inventoryPosX, int inventoryPosY, int stackSize = 1 );
	void restoreWieldItem( int slot, Item *item );
	Item* createNewItem(std::string name,
	                    int sizeX,
	                    int sizeY,
	                    std::string symbolFile,
	                    Enums::ItemQuality itemQuality,
	                    EquipPosition::EquipPosition equipPosition,
	                    Enums::ItemType itemType,
	                    Enums::ArmorType armorType,
	                    Enums::WeaponType weaponType );
						
	Player& getPlayer();
	Zone& getCurrentZone();
	void giveItemToPlayer( Item* item );
	Shop& addShop(std::string name, bool replace = false);
	Quest* addQuest( std::string questName, std::string questDescription );
	LuaCallIndirection* createEventHandler();
	bool isSavingAllowed();
	void setSavingAllowed( bool savingAllowed );
	Character* restoreCharacterReference( std::string zoneName, int posInArray );
	InteractionPoint* restoreInteractionPointReference(std::string zoneName, int posInArray);
	InteractionRegion* restoreInteractionRegionReference(std::string zoneName, int posInArray);
	CallIndirection* restoreEventHandlerReference(std::string zoneName, int posInArray);
}

namespace EditorInterface {
	TileSet& getTileSet(Enums::TileClassificationType tileType);
	void addGroundTile( int posX, int posY, int tile );
	void addEnvironment( int posX, int posY, int posZ, int tile );
	void adjustLastRGBA( float red, float green, float blue, float alpha );
	void adjustLastSize(float width, float height);
	void addCollisionRect( int lrx, int lry, int width, int height );
}

class AdjacencyEquivalenceClass {
	void addEquivalentTile( int tile, int offsetX, int offsetY );
};

class TileSet {
	unsigned int addTile( std::string filename);
	unsigned int addTileWithCollisionBox( std::string filename, int cbx, int cby, int cbw, int cbh );
	void addAdjacency(unsigned int tile1, Enums::AdjacencyType adjacencyType, unsigned int tile2, int offsetX, int offsetY);
	AdjacencyEquivalenceClass* createAdjacencyEquivalenceClass();
	void addEquivalenceAdjacency( AdjacencyEquivalenceClass *class1, Enums::AdjacencyType adjacencyType, AdjacencyEquivalenceClass *class2, int offsetX, int offsetY );
	void printTileSet() const;
};

struct CharacterType {

	void addMoveTexture(Enums::ActivityType activity, Enums::Direction direction, int index, std::string filename, unsigned int maxWidth = 0, unsigned int maxHeight = 0, int paddingLeft = 0, int paddingRight = 0, int paddingTop = 0, int paddingBottom = 0);
	void calcNumMoveTexturesPerDirection();
	void baseOnType(std::string name);
	void inscribeSpellInSpellbook(SpellActionBase* spell);
	
	void setStrength(int newStrength);
	void setDexterity(int newDexterity);
	void setVitality(int newVitality);
	void setIntellect(int newIntellect);
	void setWisdom(int newWisdom);
	void setMaxHealth(int newMaxHealth);
	void setMaxMana(int newMaxMana);
	void setMaxFatigue(int newMaxFatigue);
	void setHealthRegen(int newHealthRegen);
	void setManaRegen(int newManaRegen);
	void setFatigueRegen(int newFatigueRegen);
	void setMinDamage(int newMinDamage);
	void setMaxDamage(int newMaxDamage);
	void setArmor(int newArmor);
	void setDamageModifierPoints(int newDamageModifierPoints);
	void setHitModifierPoints(int newHitModifierPoints);
	void setEvadeModifierPoints(int newEvadeModifierPoints);
	void setName(std::string newName);
	void setWanderRadius(int newWanderRadius);
	void setLevel(int newLevel);
	void setClass(Enums::CharacterClass characterClass);
	void setExperienceValue(int experienceValue);
	
	void modifyStrength(int strengthModifier);
	void modifyDexterity(int dexterityModifier);
	void modifyVitality(int vitalityModifier);
	void modifyIntellect(int intellectModifier);
	void modifyWisdom(int wisdomModifier);
	void modifyMaxHealth(int maxHealthModifier);
	void modifyMaxFatigue(int maxFatigueModifier);
}

class Player : public Character {
	static Player& Get();
	
	void setBoundingBox(int bbx, int bby, int bbw, int bbh);
	void setClass(Enums::CharacterClass characterClass);
	void setName(std::string name);
	void setStrength(unsigned short newStrength);
	void setDexterity(unsigned short newDexterity);
	void setVitality(unsigned short newVitality);
	void setIntellect(unsigned short newIntellect);
	void setWisdom(unsigned short newWisdom);
	void setMaxHealth(unsigned short newMaxHealth);
	void setMaxMana(unsigned short newMaxMana);
	void setMaxFatigue(unsigned short newMaxFatigue);
	void setHealthRegen(unsigned short newHealthRegen);
	void setManaRegen(unsigned short newManaRegen);
	void setFatigueRegen(unsigned short newFatigueRegen);
	void setMinDamage(unsigned short newMinDamage);
	void setMaxDamage(unsigned short newMaxDamage);
	void setArmor(unsigned short newArmor);
	void setDamageModifierPoints(unsigned short newDamageModifierPoints);
	void setHitModifierPoints(unsigned short newHitModifierPoints);
	void setEvadeModifierPoints(unsigned short newEvadeModifierPoints);
	void setParryModifierPoints(unsigned short newParryModifierPoints);
	void setBlockModifierPoints(unsigned short newBlockModifierPoints);
	void setMeleeCriticalModifierPoints(unsigned short newMeleeCriticalModifierPoints);
	void setResistElementModifierPoints(Enums::ElementType elementType, unsigned short newResistElementModifierPoints);
	void setResistAllModifierPoints(unsigned short newResistAllModifierPoints);
	void setSpellEffectElementModifierPoints(Enums::ElementType elementType, unsigned short newSpellEffectElementModifierPoints);
	void setSpellEffectAllModifierPoints(unsigned short newSpellEffectAllModifierPoints);
	void setSpellCriticalModifierPoints(unsigned short newSpellCriticalModifierPoints);
	void setLevel(unsigned short newLevel);
	void setExperience(unsigned long experience);
	void giveCoins(unsigned int amountOfCoins);
	void setCoins(unsigned int amountOfCoins);
	void setPosition(int xpos, int ypos);
	void setCharacterType(std::string characterType);
	void init();
	Enums::CharacterClass getClass();
	std::string getSaveText();
}

class Npc : public Character {
	void setAttitude( Enums::Attitude attitude );
	void addOnDieEventHandler(CallIndirection *eventHandler);
	void setWanderRadius(unsigned short newWanderRadius);
};

class InteractionPoint {
	void setPosition( int posX, int posY, int width, int height );
	void setInteractionType( Enums::InteractionType interactionType );
	void setBackgroundTexture( std::string texturename, bool transparent = false );
	void setInteractionCode( std::string interactionCode );
};

class InteractionRegion {
	void setPosition( int left, int bottom, int width, int height );
	void setOnEnterText( std::string enterCode );
	void setOnLeaveText( std::string leaveCode );
};

struct TextureAtlasCreator {
	static TextureAtlasCreator& Get();
	void init(std::string name, unsigned int width = 1024u, unsigned int height = 1024u);
	void addFrame();
	unsigned int getAtlas();
	void safeAtlas(std::string name);
	void resetLine();
	std::string getName();
};

class TextureManager {
	static void SetTextureAtlas(std::string name, unsigned int value);
};

class Zone {
	void loadZone();
	void setInit(bool flag);
};

class SpellActionBase {
	void addAdditionalSpellOnTarget( SpellActionBase *spell, double chanceToExecute );
	void addAdditionalSpellOnCreator( SpellActionBase *spell, double chanceToExecute );
	void setRequiredClass( Enums::CharacterClass requiredClass );
	void setRequiredLevel( int requiredLevel );
	void addRequiredWeapon( Enums::WeaponType weaponType );
	void setSoundSpellCasting( std::string soundSpellCasting );
	void setSoundSpellStart( std::string soundSpellStart );
	void setSoundSpellHit( std::string soundSpellHit );
	void setRank( int rank );
	void setInstant( bool instant );
	void setCharacterState( Enums::CharacterStates characterState, float value = 1.0 );
	void setSymbolTextureRect(TextureRect& textureRect);
	void setNeedTarget(bool needTarget);
};

class Action : public SpellActionBase {
};

class Spell : public SpellActionBase {
};

class ConfigurableSpell : public Spell {
	void setCastTime( int newCastTime );
	void setCooldown( int newCooldown );
	void setSpellCost( int spellCost );
	void setName( std::string newName );
	void setInfo( std::string newInfo );
	void setRange( int minRange, int maxRange );
};

class ConfigurableAction : public Action {

	void setCastTime( int newCastTime );
	void setCooldown( int newCooldown );
	void setSpellCost( int spellCost );
	void setName( std::string newName );
	void setInfo( std::string newInfo );
	void setRange( int minRange, int maxRange );
};

class GeneralDamageSpell : public ConfigurableSpell {
	void setDirectDamage( int newMinDirectDamage, int newMaxDirectDamage, Enums::ElementType newElementDirect );
	void setContinuousDamage( double newMinContDamagePerSec, double newMaxContDamagePerSec, int newContDamageTime, Enums::ElementType newContDamageElement );
	void addAnimationFrame(std::string file, int paddingLeft = 0, int paddingRight = 0, int paddingTop = 0, int paddingBottom = 0);
};

class GeneralRayDamageSpell : public GeneralDamageSpell {

};

class GeneralAreaDamageSpell : public GeneralDamageSpell {
	void setRadius( int newRadius );
};

class GeneralBoltDamageSpell : public GeneralDamageSpell {
	void setMoveSpeed( int newMoveSpeed );
	void setExpireTime( int newExpireTime );
};

class GeneralHealingSpell : public ConfigurableSpell {
	void setEffectType( Enums::EffectType newEffectType );
	void setDirectHealing( int healEffectMin, int healEffectMax, Enums::ElementType healEffectElement );
	void setContinuousHealing( double minContinuousHealingPerSecond, double maxContinuousHealingPerSecond, int continuousHealingTime, Enums::ElementType elementContinuous );
};

class GeneralBuffSpell : public ConfigurableSpell {
	void setEffectType( Enums::EffectType newEffectType );
	void setDuration( int newDuration );
	void setStats( Enums::StatsType statsType, int amount );
	void setResistElementModifierPoints( Enums::ElementType elementType, int resistModifierPoints );
	void setSpellEffectElementModifierPoints( Enums::ElementType elementType, int spellEffectElementModifierPoints );

};

class MeleeDamageAction : public ConfigurableAction {
	void setDamageBonus( double damageBonus );
};

class RangedDamageAction : public ConfigurableAction {
	void setDamageBonus( double damageBonus );
	void setMoveSpeed( int newMoveSpeed );
	void setExpireTime( int newExpireTime );
	void addAnimationFrame(std::string file, int paddingLeft = 0, int paddingRight = 0, int paddingTop = 0, int paddingBottom = 0);
};

class Item {
	void setDescription( std::string description );
	void setStats( Enums::StatsType statsType, int amount );
	void setResistElementModifierPoints( Enums::ElementType elementType, int resistModifierPoints );
	void setSpellEffectElementModifierPoints( Enums::ElementType elementType, int spellEffectElementModifierPoints );
	void setMinDamage( int minDamage );
	void setMaxDamage( int maxDamage );
	void setRequiredLevel( int requiredLevel );
	void setMaxStackSize( int maxStackSize );
	void setValue( int newValue );
	void setSpell( Spell *newSpell );
	void setItemTextureRect(TextureRect& textureRect);
	void addTriggerSpellOnSelf( SpellActionBase *spellToTrigger, float chanceToTrigger, Enums::TriggerType triggerType );
	void addTriggerSpellOnTarget( SpellActionBase *spellToTrigger, float chanceToTrigger, Enums::TriggerType triggerType );
};

class Shop {
	void addItem( Item *item );
	void loadShopkeeperInventory();
};

class TextWindow {
	void setText( std::string text );
	void setAutocloseTime( int autocloseTime );
	void setPosition( Enums::PositionType, int x, int y );
	void center();
	void setOnCloseText( std::string onCloseText );
};

class Quest{
	void addRequiredItemForCompletion( Item* requiredItem, int quantity );
	void setDescription( std::string );
	void setExperienceReward( int experienceReward );
	void setCoinReward( int coinReward );
	void setItemReward( Item* itemReward );
	bool finishQuest();
};

class CallIndirection {
};

class LuaCallIndirection : public CallIndirection {
	void setExecuteText( std::string text );
};

class ShopCanvas {
	static ShopCanvas& Get();
	void activate(); 
};