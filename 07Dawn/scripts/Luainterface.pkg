$#include "TilesetManager.h"
$#include "Zone.h"
$#include "Character.h"
$#include "TextureManager.h"
$#include "Npc.h"
$#include "InteractionRegion.h"
$#include "InteractionPoint.h"
$#include "TextWindow.h"
$#include "Enums.h"

namespace Enums
{
	enum TileClassificationType{
		FLOOR,
		ENVIRONMENT,
		SHADOW,
		COLLISION,
		NPC,
		COUNT
	};

	enum AdjacencyType {
		RIGHT,
		LEFT,
		TOP,
		BOTTOM
	};
	
	enum Attitude
	{
		FRIENDLY,
		NEUTRAL,
		HOSTILE
	};
	
	enum CharacterClass
	{
		NOCLASS,
		ANYCLASS,
		Liche,
		Ranger,
		Warrior
	};
	
	enum ActivityType
	{
		Walking,
		Casting,
		Attacking,
		Shooting,
		Dying,
		Count
	};
	
	enum Direction
	{
		STOP = 0,
		N    = 1,
		NE   = 2,
		E    = 3,
		SE   = 4,
		S    = 5,
		SW   = 6,
		W    = 7,
		NW   = 8
	};
	
	enum InteractionType {
		Quest,
		Shop,
		Zone
	};
}

namespace DawnInterface{
	void enterZone(std::string zoneName, int enterX, int enterY );
	void setCurrentZone(std::string zoneName );
	CharacterType& createNewMobType(std::string typeID);
	void addMobSpawnPoint(std::string mobID, int x_pos, int y_pos, int respawn_rate, int do_respawn, Enums::Attitude attitude);
	InteractionRegion& addInteractionRegion();
	void removeInteractionRegion(InteractionRegion *regionToRemove);
	InteractionPoint& addInteractionPoint();
	InteractionPoint& addCharacterInteractionPoint(Character *character);
	void removeInteractionPoint(InteractionPoint *pointToRemove);
	std::string getItemReferenceRestore(Character *character);
	TextWindow *createTextWindow();
}

namespace EditorInterface
{
	TileSet& getTileSet(Enums::TileClassificationType tileType);
	void addGroundTile( int posX, int posY, int tile );
	void addEnvironment( int posX, int posY, int posZ, int tile );
	void adjustLastRGBA( float red, float green, float blue, float alpha );
	void adjustLastSize(float width, float height);
	void addCollisionRect( int lrx, int lry, int width, int height );
}

class AdjacencyEquivalenceClass
{
	void addEquivalentTile( int tile, int offsetX, int offsetY );
};

class TileSet
{
	unsigned int addTile( std::string filename);
	unsigned int addTileWithCollisionBox( std::string filename, int cbx, int cby, int cbw, int cbh );
	void addAdjacency(unsigned int tile1, Enums::AdjacencyType adjacencyType, unsigned int tile2, int offsetX, int offsetY);
	AdjacencyEquivalenceClass* createAdjacencyEquivalenceClass();
	void addEquivalenceAdjacency( AdjacencyEquivalenceClass *class1, Enums::AdjacencyType adjacencyType, AdjacencyEquivalenceClass *class2, int offsetX, int offsetY );
	void printTileSet() const;
};

struct CharacterType {
	void setStrength(int newStrength);
	void setDexterity(int newDexterity);
	void setVitality(int newVitality);
	void setIntellect(int newIntellect);
	void setWisdom(int newWisdom);
	void setMaxHealth(int newMaxHealth);
	void setMaxMana(int newMaxMana);
	void setMaxFatigue(int newMaxFatigue);
	void setHealthRegen(int newHealthRegen);
	void setManaRegen(int newManaRegen);
	void setFatigueRegen(int newFatigueRegen);
	void setMinDamage(int newMinDamage);
	void setMaxDamage(int newMaxDamage);
	void setArmor(int newArmor);
	void setDamageModifierPoints(int newDamageModifierPoints);
	void setHitModifierPoints(int newHitModifierPoints);
	void setEvadeModifierPoints(int newEvadeModifierPoints);
	void setName(std::string newName);
	void setWanderRadius(int newWanderRadius);
	void setLevel(int newLevel);
	void setClass(Enums::CharacterClass characterClass);
	void setExperienceValue(int experienceValue);
	void addMoveTexture(Enums::ActivityType activity, Enums::Direction direction, int index, std::string filename, int textureOffsetX = 0, int textureOffsetY = 0);
}

class Npc : public Character
{
	void setAttitude( Enums::Attitude attitude );
};

class InteractionPoint
{
	void setPosition( int posX, int posY, int width, int height );
	void setInteractionType( Enums::InteractionType interactionType );
	void setBackgroundTexture( std::string texturename );
	void setInteractionCode( std::string interactionCode );
};

class InteractionRegion
{
	void setPosition( int left, int bottom, int width, int height );
	void setOnEnterText( std::string enterCode );
	void setOnLeaveText( std::string leaveCode );
};

struct TextureAtlasCreator 
{

	static TextureAtlasCreator& get();
	void init(unsigned int width = 1024u, unsigned int height = 1024u);
	void addFrame();
	unsigned int getAtlas();
	void safeAtlas(std::string name);
	void resetLine();
};

class TextureManager
{
	static void SetTextureAtlas(std::string name, unsigned int value);
};

