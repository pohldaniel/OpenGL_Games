$#include "TilesetManager.h"
$#include "Zone.h"
$#include "Character.h"
$#include "TextureManager.h"
$#include "Npc.h"

enum Direction
{
    STOP = 0,
    N    = 1,
    NE   = 2,
    E    = 3,
    SE   = 4,
    S    = 5,
    SW   = 6,
    W    = 7,
    NW   = 8
};

namespace ActivityType
{
	enum ActivityType
	{
		Walking,
		Casting,
		Attacking,
		Shooting,
		Dying,
		Count
	};
}

namespace Attitude
{
	enum Attitude
	{
		FRIENDLY,
		NEUTRAL,
		HOSTILE
	};
}

namespace DawnInterface{
	void enterZone(std::string zoneName, int enterX, int enterY );
	void setCurrentZone(std::string zoneName );
	Character* createNewMobType(std::string typeID);
	Npc* addMobSpawnPoint(std::string mobID, int x_pos, int y_pos, int respawn_rate, int do_respawn );
}

namespace EditorInterface
{
	TileSet *getTileSet(TileClassificationType::TileClassificationType tileType);
	void addGroundTile( int posX, int posY, int tile );
	void addEnvironment( int posX, int posY, int posZ, int tile );
	void adjustLastRGBA( double red, double green, double blue, double alpha );
	//void adjustLastScale( double scaleX, double scaleY );
	void addCollisionRect( int lrx, int lry, int width, int height );
}

// EDITOR Stuff
namespace TileClassificationType
{
	enum TileClassificationType
	{
		FLOOR,
		ENVIRONMENT,
		SHADOW
	};
}

namespace AdjacencyType
{
	enum AdjacencyType
	{
		RIGHT,
		LEFT,
		TOP,
		BOTTOM
	};
}

class AdjacencyEquivalenceClass
{
	void addEquivalentTile( int tile, int offsetX, int offsetY );
};


class TileSet
{
	int addTile( std::string filename, TileClassificationType::TileClassificationType tileType );
	int addTileWithCollisionBox( std::string filename, TileClassificationType::TileClassificationType tileType, int cbx, int cby, int cbw, int cbh );
	void addAdjacency( int tile1, AdjacencyType::AdjacencyType adjacencyType, int tile2, int offsetX, int offsetY );
	AdjacencyEquivalenceClass *createAdjacencyEquivalenceClass();
	void addEquivalenceAdjacency( AdjacencyEquivalenceClass *class1, AdjacencyType::AdjacencyType adjacencyType, AdjacencyEquivalenceClass *class2, int offsetX, int offsetY );
	void printTileSet() const;
};

class Character 
{
	void setMoveTexture(ActivityType::ActivityType activity, Direction direction, int index, std::string filename, int textureOffsetX = 0, int textureOffsetY = 0);
	void setName(std::string newName);
};

class Npc : public Character
{
	void setAttitude( Attitude::Attitude attitude );
};

struct TextureAtlasCreator 
{

	static TextureAtlasCreator& get();
	void init(unsigned int width = 1024u, unsigned int height = 1024u);
	unsigned int getAtlas();
	void addFrame();
	void resetLine();
};

class TextureManager
{
	static void SetTextureAtlas(std::string name, unsigned int value);
};

